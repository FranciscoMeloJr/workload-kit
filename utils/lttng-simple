#!/usr/bin/python
# given a command, trace the application with ust, kernel or both
# kernel tracing is enabled only if the user has appropriate rights
# the basename of the command will be used as the directory if none is provided

from optparse import OptionParser
import os
import sys
import subprocess
import time
from os.path import join
import logging
import string
from subprocess import CalledProcessError
import shutil
import uuid

# the lttng command
LTTNG="lttng"

usage = """usage: %prog [options] -- [command]

Run command under tracing. If no kernel or ust option is provided,
then trace command under kernel, ust and both tracers enabled. The type of
the trace is indicated by appending a suffix to the trace output directory."""

dry_run = False
log_stream = sys.stdout
clear_trace = False

def cmd_stub(cmds):
    logging.debug("exec: " + string.join(cmds, " "))
    retcode = 0
    if (dry_run == False):
        retcode = subprocess.call(cmds, stdout=log_stream, stderr=log_stream)
        logging.debug("exit: " + str(retcode))
    return retcode

def do_trace(cmd, session, outdir, kernel, ust):
    if (not (kernel or ust)):
        return
    if (kernel):
        session += "-k"
    if (ust):
        session += "-u"
    out = join(outdir, session)
    # generate random uuid
    usession = session + "-" + str(uuid.uuid4())

    logging.info("start tracing: " + usession)
    # Checks and cleanup
    if (os.path.isdir(out)):
        if (clear_trace == True):
            if (dry_run == False):
                logging.debug("Removing trace: " + out)
                shutil.rmtree(out)
            else:
                logging.debug("Would remove trace: " + out)
        else:
            logging.warning("Append to existing trace: " + out)

    # Step 1: start session
    ret = cmd_stub([LTTNG, "create", usession, "-o", out])
    # if the session is stalled, then destroy it and try again
    if (ret == 28):
        cmd_stub([LTTNG, "destroy", usession])
        ret = cmd_stub([LTTNG,"create", usession, "-o", out])
        if (ret != 0):
            raise Exception("Can't create session " + usession)

    # Step 2: enable required events
    if (kernel):
        if (cmd_stub([LTTNG, "enable-channel", "k", "-k", "--num-subbuf", "32"]) != 0):
            raise Exception("Enable kernel channel failed")
        if (cmd_stub([LTTNG, "enable-event", "-c", "k", "-a", "-k"]) != 0):
            raise Exception("Enable kernel events failed")
    if (ust):
        if (cmd_stub([LTTNG, "enable-channel", "u", "-u"]) != 0):
            raise Exception("Enable userspace channel failed")
        if (cmd_stub([LTTNG, "enable-event", "-c", "u", "-a", "-u"]) != 0):
            raise Exception("Enable userspace events failed")
        if (cmd_stub([LTTNG, "add-context", "-c", "u", "-u", "-t", "vpid", "-t", "vtid"]) != 0):
            raise Exception("Add vpid and vtid events failed")

    # Step 3: start tracing
    ret = cmd_stub([LTTNG, "start"])
    if (ret != 0):
        raise Exception("Start tracing failed")

    # Step 4: run the program under tracing
    # Do not check the return value
    time.sleep(1)
    cmd_stub(cmd)
    time.sleep(1)

    # Step 5: tear down
    cmd_stub([LTTNG,"stop"])
    ret = cmd_stub([LTTNG,"destroy", usession])
    if (ret != 0):
        raise Exception("Destroy session " + usession + " failed")
    logging.info("done tracing: " + usession)

if __name__=="__main__":
    parser = OptionParser(usage=usage)
    parser.add_option("-k", "--kernel", dest="kernel", default=False, action="store_true", help="Trace only the kernel")
    parser.add_option("-u", "--ust", dest="ust", default=False, action="store_true", help="Trace only user space")
    parser.add_option("-o", "--output", dest="output", help="Output base directory for traces", metavar="DIR", default=os.getcwd())
    parser.add_option("-b", "--batch", dest="batch", help="Run and trace all executables from this dir", metavar="DIR")
    parser.add_option("-l", "--log", dest="log", metavar="FILE", help="Log file", default=None)
    parser.add_option("-n", "--dry-run", dest="dry_run", default=False, action="store_true", help="Do not execute commands")
    parser.add_option("-c", "--clear", dest="clear_trace", default=False, action="store_true", help="Remove previous trace if exists")

    (options, args) = parser.parse_args()

    # Consider that if no options for kernel or user space is provided
    # do the experiment by tracing kernel, ust and both
    if (not (options.kernel or options.ust)):
        options.kernel = True
        options.ust = True

    dry_run = options.dry_run
    clear_trace = options.clear_trace
    fmt = '%(asctime)s %(levelname)s: %(message)s'
    if (options.log is not None):
        logging.basicConfig(filename=options.log, level=logging.DEBUG, format=fmt)
    else:
        logging.basicConfig(level=logging.DEBUG, format=fmt)

    logger = logging.getLogger()
    log_stream = logger.handlers[0].stream

    targets = []
    if (options.batch is None):
        if (args is not None and type(args) is list and len(args) > 0):
            target = {"name":os.path.basename(args[0]),
                      "cmd":args}
            targets.append(target)
    else:
        # Add all scripts from the directory
        for exe in os.listdir(options.batch):
            file = join(options.batch, exe)
            if (os.path.isfile(file)):
                target = {"name":exe, "cmd":[file]}
                targets.append(target)

    if (len(targets) == 0):
        print "Error: Nothing to trace!"
        parser.print_help()
        sys.exit(1)

    try:
        for t in targets:
            if (options.kernel):
                do_trace(t["cmd"], t["name"], options.output, kernel=True, ust=False)
            if (options.ust):
                do_trace(t["cmd"], t["name"], options.output, kernel=False, ust=True)
            if (options.ust and options.kernel):
                do_trace(t["cmd"], t["name"], options.output, kernel=True, ust=True)
    except Exception as e:
        logging.error(str(e))
    else:
        logging.debug("done")

